{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "719f9403-99f9-4f5d-9bcc-0dab50dabac8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "6532f836-ac3a-404e-86b7-c97e4b53b2a6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected data to show:\n",
      "   listPrice    rent  livingArea  rooms  soldPrice    soldDate\n",
      "0    3995000  4467.0        73.0    3.0    3820000  2018-11-08\n",
      "1    1995000  1773.0        36.0    1.0    2355000  2018-10-19\n",
      "2    5100000  3839.0        81.0    3.0    6110000  2018-09-27\n",
      "3    5495000  4483.0       107.0    4.0    8050000  2018-09-06\n",
      "4    1995000  1696.0        29.0    1.0    2400000  2018-06-18\n",
      "5    7495000  5923.0       125.0    4.0    8950000  2018-06-21\n",
      "6    3975000  3324.0        79.2    3.0    4200000  2018-06-16\n",
      "7    3250000  2789.0        64.3    2.0    3300000  2018-06-15\n",
      "8    3250000  2965.0        64.3    2.0    3150000  2018-06-10\n",
      "9    5495000  6465.0        96.0    3.0    5400000  2018-06-04\n",
      "Aded ppsqm to the table:\n",
      "          ppsqm  listPrice    rent  livingArea  rooms  soldPrice    soldDate\n",
      "0  52328.767123    3995000  4467.0        73.0    3.0    3820000  2018-11-08\n",
      "1  65416.666667    1995000  1773.0        36.0    1.0    2355000  2018-10-19\n",
      "2  75432.098765    5100000  3839.0        81.0    3.0    6110000  2018-09-27\n",
      "3  75233.644860    5495000  4483.0       107.0    4.0    8050000  2018-09-06\n",
      "4  82758.620690    1995000  1696.0        29.0    1.0    2400000  2018-06-18\n",
      "5  71600.000000    7495000  5923.0       125.0    4.0    8950000  2018-06-21\n",
      "6  53030.303030    3975000  3324.0        79.2    3.0    4200000  2018-06-16\n",
      "7  51321.928460    3250000  2789.0        64.3    2.0    3300000  2018-06-15\n",
      "8  48989.113530    3250000  2965.0        64.3    2.0    3150000  2018-06-10\n",
      "9  56250.000000    5495000  6465.0        96.0    3.0    5400000  2018-06-04\n",
      "The top 5 most expencive appartments:\n",
      "            ppsqm\n",
      "67  104166.666667\n",
      "50  102083.333333\n",
      "54  100000.000000\n",
      "34   88400.000000\n",
      "55   85501.858736\n",
      "The average price per square meter (ppsqm) in Ekhagen is: 58759.38 SEK\n",
      "Average percentage price increase for small apartments (under 50 sqm).: 13.65%\n",
      "Average percentage price increase for large apartments (over 100 kvm): 7.81%\n"
     ]
    }
   ],
   "source": [
    "\n",
    "#Load the data \n",
    "file_path = \"/Users/wilmaberglund/Booli_sold.csv\"\n",
    "\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# Show specified columns\n",
    "selected_columns = [\"listPrice\", \"rent\", \"livingArea\", \"rooms\", \"soldPrice\", \"soldDate\"]\n",
    "\n",
    "print(\"Selected data to show:\")\n",
    "print(df[selected_columns].head(10))\n",
    "\n",
    "# Calculate price per square meter (ppsqm)\n",
    "df['ppsqm'] = df['soldPrice'] / df['livingArea']\n",
    "selected_column = [\"ppsqm\"]\n",
    "\n",
    "print(\"Aded ppsqm to the table:\")\n",
    "print(pd.concat([df[selected_column], df[selected_columns]], axis=1).head(10))  # Concatenating selected columns\n",
    "\n",
    "#Sort by ppsqm in descending order to display the most expensive apartments first.\n",
    "top_5_expensive = df.sort_values(by='ppsqm', ascending=False).head(5)\n",
    "\n",
    "#Show the 5 most expensive apparments per square meter\n",
    "print(\"The top 5 most expencive appartments:\")\n",
    "print(top_5_expensive[selected_column]) \n",
    "\n",
    "# Calculate the average ppsqm\n",
    "average_ppsqm = df['ppsqm'].mean()\n",
    "\n",
    "#Show the average ppsqm\n",
    "print(f\"The average price per square meter (ppsqm) in Ekhagen is: {average_ppsqm:.2f} SEK\")\n",
    "\n",
    "#Calculate the percentage change from the listing price to the final price.\n",
    "df['price_diff_percent'] = ((df['soldPrice'] - df['listPrice']) / df['listPrice']) * 100\n",
    "\n",
    "#Divide the data into small and large apartments.\n",
    "small_apartments = df[df['livingArea'] < 50]\n",
    "large_apartments = df[df['livingArea'] > 100]\n",
    "\n",
    "#Calculate the average percentage change for small and large apartments.\n",
    "average_percent_small = small_apartments['price_diff_percent'].mean()\n",
    "average_percent_large = large_apartments['price_diff_percent'].mean()\n",
    "\n",
    "#Show the result\n",
    "print(f\"Average percentage price increase for small apartments (under 50 sqm).: {average_percent_small:.2f}%\")\n",
    "print(f\"Average percentage price increase for large apartments (over 100 kvm): {average_percent_large:.2f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "3822a29c-27b7-4953-8f08-c852d17ebd36",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I chose to investigate whether the final sale prices, in percentage, differ between small and large apartments in Ekhagen. Through this analysis, we can see that small apartments tend to increase more from the list price compared to larger apartments.This is interesting because it suggests that smaller apartments in Ekhagen may be in higher demand or more competitive, causing them to sell for a higher percentage above their list price. In contrast, larger apartments may face less competition or demand, which could result in a lower percentage increase from the list price. Also I think smaller appartments are more popular among young people who are more likely to be looking for affordable options. Sellers may intentionally set lower list prices to attract more interest and create a competitive bidding environment, which could lead to higher final sale prices. On the other hand, larger apartments, which are more likely to attract families, may not see the same pricing strategy. Families typically have a more specific set of needs and may be less likely to engage in competitive bidding wars, meaning that sellers of larger apartments may not feel the same pressure to lower their initial prices to generate interest. \n"
     ]
    }
   ],
   "source": [
    "text=\"I chose to investigate whether the final sale prices, in percentage, differ between small and large apartments in Ekhagen. Through this analysis, we can see that small apartments tend to increase more from the list price compared to larger apartments.This is interesting because it suggests that smaller apartments in Ekhagen may be in higher demand or more competitive, causing them to sell for a higher percentage above their list price. In contrast, larger apartments may face less competition or demand, which could result in a lower percentage increase from the list price. Also I think smaller appartments are more popular among young people who are more likely to be looking for affordable options. Sellers may intentionally set lower list prices to attract more interest and create a competitive bidding environment, which could lead to higher final sale prices. On the other hand, larger apartments, which are more likely to attract families, may not see the same pricing strategy. Families typically have a more specific set of needs and may be less likely to engage in competitive bidding wars, meaning that sellers of larger apartments may not feel the same pressure to lower their initial prices to generate interest. \" \n",
    "print(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "3f8850bb-eeb4-482f-a7df-c82fe532fedf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   LÄNSKOD  KOMMUNKOD        LÄNSNAMN      KOMMUNNAMN      M      C     L  \\\n",
      "0        1         14  Stockholms län  Upplands Väsby  23.11   6.26  5.66   \n",
      "1        1         15  Stockholms län      Vallentuna  28.29  10.11  7.73   \n",
      "2        1         17  Stockholms län       Österåker  29.68   9.35  7.48   \n",
      "3        1         20  Stockholms län          Värmdö  27.49   9.76  6.40   \n",
      "4        1         23  Stockholms län        Järfälla  23.96   6.31  6.04   \n",
      "5        1         25  Stockholms län           Ekerö  28.12  11.24  7.64   \n",
      "6        1         26  Stockholms län        Huddinge  24.07   7.52  6.14   \n",
      "7        1         27  Stockholms län        Botkyrka  18.52   5.19  4.39   \n",
      "8        1         28  Stockholms län           Salem  24.84   7.61  7.58   \n",
      "9        1         36  Stockholms län         Haninge  22.94   6.06  5.11   \n",
      "\n",
      "       S     V  RÖSTBERÄTTIGADE  VALDELTAGANDE  \n",
      "0  26.97  8.01            30740          84.70  \n",
      "1  18.91  4.47            23438          90.02  \n",
      "2  19.71  4.97            31309          89.26  \n",
      "3  20.48  6.02            31371          90.32  \n",
      "4  27.68  8.75            53230          86.32  \n",
      "5  17.17  4.76            19472          92.16  \n",
      "6  26.10  8.63            72839          84.94  \n",
      "7  32.34  9.85            58436          78.24  \n",
      "8  23.07  5.98            11463          87.81  \n",
      "9  27.29  7.99            59890          85.06  \n",
      "Total number of legitimate votes in Stockholm: 1426237\n",
      "The municipality where Socialdemokraterna (S) garnered the highest voting percentage is: Munkfors with 52.18%\n",
      "Table of the top 3 municipalities with the highest voter participation:\n",
      "    KOMMUNNAMN  VALDELTAGANDE\n",
      "103      Lomma          93.86\n",
      "59        Habo          93.35\n",
      "98    Vellinge          93.13\n"
     ]
    }
   ],
   "source": [
    "#Load the data\n",
    "file_path = \"/Users/wilmaberglund/2018_R_per_kommun.csv\"\n",
    "df = pd.read_csv(file_path, sep=';', decimal=',')\n",
    "\n",
    "#Show specific columns \n",
    "selected_columns = ['LÄNSKOD', 'KOMMUNKOD', 'LÄNSNAMN', 'KOMMUNNAMN', 'M', 'C', 'L', 'S', 'V', 'RÖSTBERÄTTIGADE', 'VALDELTAGANDE']\n",
    "\n",
    "#Print the first 10 rows for the chosen columns\n",
    "print(df[selected_columns].head(10))\n",
    "\n",
    "\n",
    "# Filter data for Stockholm County (Stockholms län)\n",
    "df_stockholm = df[df['LÄNSNAMN'] == 'Stockholms län']\n",
    "\n",
    "# Calculate the total number of legitimate votes\n",
    "total_legitimate_votes = df_stockholm['RÖSTER GILTIGA'].sum()\n",
    "\n",
    "# Print the result\n",
    "print(f\"Total number of legitimate votes in Stockholm: {total_legitimate_votes}\")\n",
    "\n",
    "# Find the highest vote percentage for S\n",
    "max_s_votes = df['S'].max()  \n",
    "\n",
    "#Find the municipality with that max value\n",
    "municipality_max_s = df[df['S'] == max_s_votes]['KOMMUNNAMN'].values[0]  \n",
    "print(f\"The municipality where Socialdemokraterna (S) garnered the highest voting percentage is: {municipality_max_s} with {max_s_votes}%\")\n",
    "\n",
    "#Sort the data by 'VALDELTAGANDE' column in descending order\n",
    "top_3_municipalities = df[['KOMMUNNAMN', 'VALDELTAGANDE']].sort_values(by='VALDELTAGANDE', ascending=False).head(3)\n",
    "\n",
    "#Print the table of the top 3 municipalities with the highest voter participation\n",
    "\n",
    "print(\"Table of the top 3 municipalities with the highest voter participation:\")\n",
    "print(top_3_municipalities)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "7ebd2614-ec3d-453b-93fd-79d8970f6e64",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Table of strokes for diffrent persons:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>ever_married</th>\n",
       "      <th>work_type</th>\n",
       "      <th>Residence_type</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>smoking_status</th>\n",
       "      <th>stroke</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9046</td>\n",
       "      <td>Male</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>228.69</td>\n",
       "      <td>36.6</td>\n",
       "      <td>formerly smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>51676</td>\n",
       "      <td>Female</td>\n",
       "      <td>61.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>202.21</td>\n",
       "      <td>NaN</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>31112</td>\n",
       "      <td>Male</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>105.92</td>\n",
       "      <td>32.5</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60182</td>\n",
       "      <td>Female</td>\n",
       "      <td>49.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>171.23</td>\n",
       "      <td>34.4</td>\n",
       "      <td>smokes</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1665</td>\n",
       "      <td>Female</td>\n",
       "      <td>79.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>174.12</td>\n",
       "      <td>24.0</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id  gender   age  hypertension  heart_disease ever_married  \\\n",
       "0   9046    Male  67.0             0              1          Yes   \n",
       "1  51676  Female  61.0             0              0          Yes   \n",
       "2  31112    Male  80.0             0              1          Yes   \n",
       "3  60182  Female  49.0             0              0          Yes   \n",
       "4   1665  Female  79.0             1              0          Yes   \n",
       "\n",
       "       work_type Residence_type  avg_glucose_level   bmi   smoking_status  \\\n",
       "0        Private          Urban             228.69  36.6  formerly smoked   \n",
       "1  Self-employed          Rural             202.21   NaN     never smoked   \n",
       "2        Private          Rural             105.92  32.5     never smoked   \n",
       "3        Private          Urban             171.23  34.4           smokes   \n",
       "4  Self-employed          Rural             174.12  24.0     never smoked   \n",
       "\n",
       "   stroke  \n",
       "0       1  \n",
       "1       1  \n",
       "2       1  \n",
       "3       1  \n",
       "4       1  "
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Define the file path\n",
    "file_path = \"/Users/wilmaberglund/stroke-data.csv\"\n",
    "\n",
    "# Läs in csv\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# Välj specifika kolumner att visa\n",
    "selected_columns = [\"id\", \"gender\", \"age\", \"hypertension\", \"heart_disease\", \"ever_married\", \"work_type\", \"Residence_type\", \"avg_glucose_level\", \"bmi\", \"smoking_status\", \"stroke\"]\n",
    "\n",
    "# Visa DataFrame som en tabell\n",
    "print(\"Table of strokes for diffrent persons:\")\n",
    "df[selected_columns].head()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "a68c8921-0aa4-41fb-94d0-425953085fcb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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QVWsWFFvvfWW/fLblM6cOaNXX31V0v/NcqbcL8aYVHfRPn/+fKqvoypZsqQCAgLsXz8VGxurwMBADR8+PM07kifH7UxbmRk/frxDvOPHj5enp6caN27ssN6jjz6q7du3q1+/fnJ3d8/0jvrS/82ev/zyy3rwwQcdfjp06KD69evb1wkPD1eFChX05ZdfOhyrlStXatu2bQ7tdujQQdeuXdMbb7yRqs+rV69m+nyrXbu2jDGp7g4/d+7cVD/Jl1l/+eWXGjNmjH3dtJ47H330kU6cOKHmzZtn2H9az5XExERNnjw5w+0ycu+99+rXX391+GaCEydOpHuVQWbxSKnPwZSuv9v8uHHjJEktWrSwx5NWG+mdxx07dtThw4f12WefacuWLQ6Xt0vSAw88IHd3dw0dOjRVnMaYVF8Ht337dl28eFF16tRJNwcAyOuYQQeA28Tzzz+v8+fP6/7771dMTIwuX76sNWvWaMaMGYqKilL37t3t61arVk1LlizR6NGjFR4erhIlSqhmzZrptl2pUiV17dpVn3zyiRISElS/fn2tX79eU6ZMUdu2bdWwYcM0t7vjjjv0v//9Tw0aNFBsbKyWLVumwMBAffbZZ2rRooXKly+v7t27q2jRojp06JCWL1+uwMBAff/99+nG4unpqTlz5qhJkyaqV6+eOnTooLp168rT01N//vmnpk2bppCQEL311luKiYlRyZIl9dJLL+nQoUMKDAzU7NmzU11KvWvXLjVu3FgdOnRQuXLl5OHhoblz5+rYsWP2ojcwMFAfffSRHn30UVWtWlWdOnVSoUKFdODAAS1YsEB169bV+PHjnWorIz4+Plq0aJG6du2qmjVrauHChVqwYIFeeeWVVJeJt2zZUgUKFNCsWbPUokULh++7T8/UqVNVuXLldD8e0Lp1az3//PPatGmTqlatquHDh6tNmzaqW7euunfvrvj4eI0fP14VKlRwKNrr16+vp556SiNGjNDmzZvVrFkzeXp6avfu3Zo1a5bef/99Pfjgg+nGdffdd6tAgQJasmSJGjVqZF/etm3bVOsmz5i3aNFCBQsWtC+PjIxUx44dVbFiRfn4+GjVqlWaPn26KleunOnXszVr1kxeXl6677779NRTT+ns2bP69NNPVbhwYYerT7Li5Zdf1ldffaXmzZurV69e8vPz0yeffKLIyEht3bo1w20DAwPt9y+4cuWKihYtqv/973+Ki4tLd5u4uDi1bt1azZs319q1a/X111/r4YcfVqVKlSRl/Ty+9957FRAQoJdeeknu7u5q166dw+MlS5bUm2++qYEDB2r//v1q27atAgICFBcXp7lz5+rJJ5/USy+9ZF9/8eLFypcvn5o2bZrVXQkAecdNv288ACBHLFy40Dz22GMmJibG+Pv7Gy8vL3PHHXeY559/3hw7dsxh3b/++svUq1fP+Pr6Gkn2r1xL7+urjDHmypUrZujQoaZEiRLG09PTREREmIEDB5qLFy86rJfya9aSrVu3zgQEBJh69erZvzrq999/Nw888IApUKCA8fb2NpGRkaZDhw5m6dKlTuUbHx9vBg8ebCpWrGjy5ctnfHx8TIUKFczAgQPNkSNH7Ott377dNGnSxPj7+5uCBQuaHj16mC1bthhJZvLkycYYY/7991/z3HPPmZiYGOPn52eCgoJMzZo1zcyZM1P1u3z5chMbG2uCgoKMj4+PKVmypOnWrZvZsGFDltu6XteuXY2fn5/Zu3evadasmcmXL58JDQ01Q4YMMdeuXUtzm+Sv0po2bVqm7W/cuNFIMoMGDUp3nf379xtJpk+fPvZl06dPNzExMcbb29tUqFDBzJ8/37Rr187ExMSk2v6TTz4x1apVM76+viYgIMBUrFjRvPzyy+bw4cOZxvfCCy+YO+64I9P10nuePvHEE6ZcuXImICDAeHp6mjvuuMP079/fnD59OtM2jTFm/vz55s477zQ+Pj4mKirKjBw50nz++eepvhItree4McbUr1/f1K9f32HZ1q1bTf369Y2Pj48pWrSoeeONN8ykSZOc+pq1f/75x9x///0mODjYBAUFmfbt25vDhw8bSWbIkCGp9sf27dvNgw8+aAICAkxISIjp2bOnuXDhgkObzp7HyTp37mwkmSZNmqQb5+zZs83dd99t/Pz8jJ+fn4mJiTHPPfec2blzp8N6NWvWNI888kiGOQNAXmczxoV3MwEAADdVnz59NGnSJB09elT58uW7af1WrlxZhQoVSvfz/Ddi3759iomJ0cKFC1Ndzo9b2+bNm1W1alVt2rQp3ZtDAgD4DDoAALesixcv6uuvv1a7du1yrDi/cuWKrl696rBsxYoV2rJlixo0aODSvqKjo/X444/r7bffdmm7yH1vv/22HnzwQYpzAMgEM+gAANxijh8/riVLlujbb7/VvHnzcnRWcv/+/WrSpIkeeeQRhYeH66+//tLEiRMVFBSkP/74QwUKFMiRfgEAyIu4SRwAALeY7du3q3PnzipcuLA++OCDHJ2VDAkJUbVq1fTZZ5/pxIkT8vPzU8uWLfX2229TnAMA4GLMoAMAAAAAYAF8Bh0AAAAAAAugQAcAAAAAwAJu+8+gJyUl6fDhwwoICJDNZsvtcAAAAAAAtzljjM6cOaPw8HC5uTk/L37bF+iHDx9WREREbocBAAAAAMhjDh48qGLFijm9/m1foAcEBEj6b8cEBgbmcjQAAAAAgNvd6dOnFRERYa9HnXXbF+jJl7UHBgZSoAMAAAAAbpqsfsyam8QBAAAAAGABFOgAAAAAAFgABToAAAAAABZw238GHQAAVzHG6OrVq7p27Vpuh4Ic4unpKXd399wOAwCQR1GgAwDghMuXL+vIkSM6f/58boeCHGSz2VSsWDH5+/vndigAgDyIAh0AgEwkJSUpLi5O7u7uCg8Pl5eXV5bvygrrM8boxIkT+ueff1SqVClm0gEANx0FOgAAmbh8+bKSkpIUERGhfPny5XY4yEGFChXS/v37deXKFQp0AMBNx03iAABwkpsbw+btjisjAAC5if80AAAAAACwAAp0AAAAAAAsgAIdAIDb0Ouvv67KlSvndhgAACALKNABALgJTpw4oWeeeUbFixeXt7e3wsLCFBsbq9WrV9vXsdlsmjdvXu4FmYktW7aodevWKly4sHx8fBQVFaWOHTvq+PHjkqQVK1bIZrMpISEhS+3u379fNptNmzdvdn3QAADcQriLOwAAN0G7du10+fJlTZkyRdHR0Tp27JiWLl2qkydPZqmdy5cvy8vLK4eiTN+JEyfUuHFjtWrVSj/99JOCg4O1f/9+zZ8/X+fOnbvp8QAAcDtiBh0AgByWkJCgX375RSNHjlTDhg0VGRmpGjVqaODAgWrdurUkKSoqSpJ0//33y2az2f9OvlT9s88+U4kSJeTj4yNJOnDggNq0aSN/f38FBgaqQ4cOOnbsWLox7N27V9HR0erZs6eMMbp06ZJeeuklFS1aVH5+fqpZs6ZWrFiR7varV69WYmKiPvvsM1WpUkUlSpRQw4YNNWbMGJUoUUL79+9Xw4YNJUkhISGy2Wzq1q2bJGnRokW6++67FRwcrAIFCqhVq1bau3evve0SJUpIkqpUqSKbzaYGDRpIkho0aKDevXs7xNG2bVt7u5L04YcfqlSpUvLx8VFoaKgefPDBjA4FAACWRoEOAEAO8/f3l7+/v+bNm6dLly6luc5vv/0mSZo8ebKOHDli/1uS9uzZo9mzZ2vOnDnavHmzkpKS1KZNG506dUorV67U4sWLtW/fPnXs2DHNtrdu3aq7775bDz/8sMaPHy+bzaaePXtq7dq1mj59urZu3ar27durefPm2r17d5pthIWF6erVq5o7d66MMakej4iI0OzZsyVJO3fu1JEjR/T+++9Lks6dO6cXX3xRGzZs0NKlS+Xm5qb7779fSUlJkqT169dLkpYsWaIjR45ozpw5zuxWbdiwQS+88IKGDRumnTt3atGiRapXr55T2wIAYEVc4g4AQA7z8PDQF198oR49emjixImqWrWq6tevr06dOunOO++UJBUqVEiSFBwcrLCwMIftL1++rC+//NK+zuLFi7Vt2zbFxcUpIiJCkvTll1+qfPny+u2331S9enX7tmvWrFGrVq306quvqm/fvpL+m32fPHmyDhw4oPDwcEnSSy+9pEWLFmny5MkaPnx4qhxq1aqlV155RQ8//LCefvpp1ahRQ40aNVKXLl0UGhoqd3d35c+fX5JUuHBhBQcH27dt166dQ1uff/65ChUqpO3bt6tChQr2vAoUKJAq94wcOHBAfn5+atWqlQICAhQZGakqVao4vT0AAFbDDDoAADdBu3btdPjwYc2fP1/NmzfXihUrVLVqVX3xxReZbhsZGWkvYiVpx44dioiIsBfnklSuXDkFBwdrx44d9mUHDhxQ06ZNNXjwYHtxLknbtm3TtWvXVLp0afvsvr+/v1auXOlw6fn13nrrLR09elQTJ05U+fLlNXHiRMXExGjbtm0Zxr9792499NBDio6OVmBgoP3y/QMHDmSae0aaNm2qyMhIRUdH69FHH9XUqVN1/vz5bLUJAEBuokAHAOAm8fHxUdOmTTVo0CCtWbNG3bp105AhQzLdzs/P74b6K1SokGrUqKFvvvlGp0+fti8/e/as3N3dtXHjRm3evNn+s2PHDvtl6ekpUKCA2rdvr/fee087duxQeHi43nvvvQy3ue+++3Tq1Cl9+umnWrdundatWyfpvysDMuLm5pbqcvorV67Yfw8ICNCmTZv0zTffqEiRIho8eLAqVaqU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",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Filter after age over 45\n",
    "df_45_and_above = df[df['age'] >= 45]\n",
    "\n",
    "#Plot stroke distribution by age (from age 45 and up )\n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.countplot(data=df_45_and_above, x='age', hue='stroke', palette={0: 'green', 1: 'pink'})\n",
    "plt.title('Stroke Cases by Age (45 and above)')\n",
    "plt.xlabel('Age')\n",
    "plt.ylabel('Count of Cases')\n",
    "\n",
    "# Adjust titles\n",
    "plt.legend(title='Stroke Status', labels=['Not Stroke', 'Stroke'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "4232c954-044f-4192-a185-1df4b273c300",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of stroke cases varies across ages, but there’s a noticeable increase in cases among older individuals. This suggests that the risk of having a stroke may rise with age.\n"
     ]
    }
   ],
   "source": [
    "text=\"The number of stroke cases varies across ages, but there’s a noticeable increase in cases among older individuals. This suggests that the risk of having a stroke may rise with age.\"\n",
    "print(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dbaac242-ef01-4dc4-ac93-8167b2fc4118",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
